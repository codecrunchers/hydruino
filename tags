!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANALOG_SENSOR	src/cloudponics.h	/^  const int8_t ANALOG_SENSOR = 1;$/;"	m	namespace:__anon1
BOTTOM_ROW	src/DisplayController.cpp	62;"	d	file:
CLOUDPONICSH_	src/cloudponics.h	2;"	d
DEBUG	src/cloudponics.h	/^  const bool DEBUG                  = true;;$/;"	m	namespace:__anon1
DEFAULT_BRIGHT	src/DisplayController.h	/^  const int8_t DEFAULT_BRIGHT = 8;$/;"	m	namespace:__anon1
DEFAULT_DEVICE	src/DisplayController.h	/^  const int8_t DEFAULT_DEVICE = 0;$/;"	m	namespace:__anon1
DELAY_LED	src/DisplayController.h	/^  const int8_t DELAY_LED = 50;$/;"	m	namespace:__anon1
DELAY_TIME	src/DisplayController.h	/^  const int8_t DELAY_TIME = 250;$/;"	m	namespace:__anon1
DHT	src/DHTSensor.h	/^    dht DHT;$/;"	m	class:DHTSensor
DHT11_PIN	src/cloudponics.h	/^  const int8_t DHT11_PIN              =  3;$/;"	m	namespace:__anon1
DHTSENSOR_h	src/DHTSensor.h	2;"	d
DHTSensor	src/DHTSensor.h	/^    DHTSensor(sensor_type t) : Sensor(t){}$/;"	f	class:DHTSensor
DHTSensor	src/DHTSensor.h	/^class DHTSensor : public Sensor{$/;"	c
DIGITAL_SENSOR	src/cloudponics.h	/^  const int8_t DIGITAL_SENSOR = 2;$/;"	m	namespace:__anon1
DISPLAYCONTROLLER_h	src/DisplayController.h	2;"	d
DisplayController	src/DisplayController.h	/^    DisplayController() : Task(RUN_INTERVAL, &(DisplayController::update)){}$/;"	f	class:DisplayController
DisplayController	src/DisplayController.h	/^class DisplayController : Task {$/;"	c
FAN_RELAY_PIN	src/cloudponics.h	/^  const int8_t FAN_RELAY_PIN          =  2;$/;"	m	namespace:__anon1
FAN_h	src/Fan.h	2;"	d
Fan	src/Fan.h	/^class Fan : public MotorController $/;"	c
HOW_BRIGHT	src/cloudponics.h	/^  const int8_t HOW_BRIGHT             = 10;$/;"	m	namespace:__anon1
LDRSENSOR_h	src/LDRSensor.h	2;"	d
LDRSensor	src/LDRSensor.h	/^    LDRSensor(sensor_type t) : Sensor(t){}$/;"	f	class:LDRSensor
LDRSensor	src/LDRSensor.h	/^class LDRSensor : public Sensor {$/;"	c
LDR_PIN	src/cloudponics.h	/^  const int8_t LDR_PIN                =  A1;$/;"	m	namespace:__anon1
LED_CLK_PIN	src/cloudponics.h	/^  const int8_t LED_CLK_PIN            = 5;$/;"	m	namespace:__anon1
LED_COUNT	src/DisplayController.h	/^  const int8_t LED_COUNT =  1;$/;"	m	namespace:__anon1
LED_DATA_IN_PIN	src/cloudponics.h	/^  const int8_t LED_DATA_IN_PIN        = 7;$/;"	m	namespace:__anon1
LED_LOAD_CS_PIN	src/cloudponics.h	/^  const int8_t LED_LOAD_CS_PIN        = 6; $/;"	m	namespace:__anon1
MAIN_LOOP_INTERVAL	src/cloudponics.h	/^  const int16_t MAIN_LOOP_INTERVAL    = 5000;$/;"	m	namespace:__anon1
MAX_LEN_MSG	src/DisplayController.h	/^  const int8_t MAX_LEN_MSG  = 8;$/;"	m	namespace:__anon1
MOTORCONTROLLER_h	src/MotorController.h	2;"	d
MotorController	src/MotorController.cpp	/^MotorController::MotorController(){}$/;"	f	class:MotorController
MotorController	src/MotorController.h	/^class MotorController {$/;"	c
NUTRIENTPUMP_h	src/nutrient_pump.h	2;"	d
NutrientPump	src/nutrient_pump.h	/^class NutrientPump : public MotorController {};$/;"	c
PHSENSOR_H_	src/PHSensor.h	2;"	d
PHSensor	src/PHSensor.cpp	/^PHSensor::PHSensor(sensor_type t)  : Sensor(t) {$/;"	f	class:PHSensor
PHSensor	src/PHSensor.h	/^class PHSensor : public Sensor {$/;"	c
PH_DOWN_PUMP_RELAY_PIN	src/cloudponics.h	/^  const int8_t PH_DOWN_PUMP_RELAY_PIN =  10;  \/\/PWM$/;"	m	namespace:__anon1
PH_PIN	src/cloudponics.h	/^  const int8_t PH_PIN                =  A0;$/;"	m	namespace:__anon1
PH_UP_PUMP_RELAY_PIN	src/cloudponics.h	/^  const int8_t PH_UP_PUMP_RELAY_PIN   =  9;   \/\/PWM$/;"	m	namespace:__anon1
RUN_INTERVAL	src/DisplayController.h	/^  const int16_t RUN_INTERVAL  = 1000;$/;"	m	namespace:__anon1
SCOUNT	src/TDSSensor.h	5;"	d
SENSOR_h	src/Sensor.h	2;"	d
Sensor	src/Sensor.h	/^    Sensor(sensor_type type) : _sensor_type(type) { }$/;"	f	class:Sensor
Sensor	src/Sensor.h	/^class Sensor {$/;"	c
TDSSENSOR_h	src/TDSSensor.h	2;"	d
TDSSensor	src/TDSSensor.h	/^    TDSSensor(sensor_type t) : Sensor(t){}$/;"	f	class:TDSSensor
TDSSensor	src/TDSSensor.h	/^class TDSSensor : public Sensor {$/;"	c
TDS_PIN	src/cloudponics.h	/^  const int8_t TDS_PIN                =  A2;$/;"	m	namespace:__anon1
TOP_ROW	src/DisplayController.cpp	63;"	d	file:
VREF	src/TDSSensor.h	4;"	d
WATERPUMP_h	src/water_pump.h	2;"	d
WATERTEMPHUMIDITYSENSOR_h	src/WaterTempHumiditySensor.h	2;"	d
WATER_PUMP_RELAY_PIN	src/cloudponics.h	/^  const int8_t WATER_PUMP_RELAY_PIN   =  1;$/;"	m	namespace:__anon1
WaterPump	src/water_pump.h	/^class WaterPump : public MotorController {$/;"	c
WaterTempHumiditySensor	src/WaterTempHumiditySensor.h	/^    WaterTempHumiditySensor(sensor_type t) : Sensor(t){}$/;"	f	class:WaterTempHumiditySensor
WaterTempHumiditySensor	src/WaterTempHumiditySensor.h	/^class WaterTempHumiditySensor : public Sensor {$/;"	c
_alert	src/DisplayController.h	/^    bool _alert  = false;$/;"	m	class:DisplayController
_busy	src/DisplayController.h	/^    bool _busy = false;$/;"	m	class:DisplayController
_debugWrite	src/cloudponics.h	/^  void _debugWrite(const char* msg){$/;"	f	namespace:__anon1
_desc	src/MotorController.h	/^    char _desc[256];$/;"	m	class:MotorController
_desc	src/Sensor.h	/^    char* _desc = nullptr;$/;"	m	class:Sensor
_display	src/DisplayController.h	/^    LedControl *_display;$/;"	m	class:DisplayController
_msg	src/DisplayController.h	/^    char* _msg = nullptr;$/;"	m	class:DisplayController
_reset	src/DisplayController.h	/^    bool _reset = false;$/;"	m	class:DisplayController
_sensor_type	src/Sensor.h	/^    sensor_type _sensor_type;$/;"	m	class:Sensor
_t	src/DHTSensor.h	/^    dht_sensor_reading _t;$/;"	m	class:DHTSensor
_t	src/WaterTempHumiditySensor.h	/^    dual_sensor_reading _t; \/\/unused$/;"	m	class:WaterTempHumiditySensor
alert	src/DisplayController.h	/^    void alert(bool alert){$/;"	f	class:DisplayController
analogBuffer	src/TDSSensor.h	/^    int analogBuffer[SCOUNT];    \/\/ store the analog value in the array, read from ADC$/;"	m	class:TDSSensor
analogBufferIndex	src/TDSSensor.h	/^    int analogBufferIndex = 0,copyIndex = 0;$/;"	m	class:TDSSensor
analogBufferTemp	src/TDSSensor.h	/^    int analogBufferTemp[SCOUNT];$/;"	m	class:TDSSensor
averageVoltage	src/TDSSensor.h	/^    float averageVoltage = 0,tdsValue = 0,temperature = 25;$/;"	m	class:TDSSensor
busy	src/DisplayController.h	/^    void busy(bool busy){$/;"	f	class:DisplayController
copyIndex	src/TDSSensor.h	/^    int analogBufferIndex = 0,copyIndex = 0;$/;"	m	class:TDSSensor
dht_sensor_reading	src/DHTSensor.h	/^    } dht_sensor_reading;$/;"	t	class:DHTSensor	typeref:struct:DHTSensor::__anon1
do_alert	src/DisplayController.cpp	/^void DisplayController::do_alert(){$/;"	f	class:DisplayController
do_busy	src/DisplayController.cpp	/^void DisplayController::do_busy(){$/;"	f	class:DisplayController
do_reset	src/DisplayController.cpp	/^void DisplayController::do_reset(){$/;"	f	class:DisplayController
do_write	src/DisplayController.cpp	/^void DisplayController::do_write(){$/;"	f	class:DisplayController
dual_sensor_reading	src/WaterTempHumiditySensor.h	/^    } dual_sensor_reading;$/;"	t	class:WaterTempHumiditySensor	typeref:struct:WaterTempHumiditySensor::__anon5
getDesc	src/Sensor.h	/^    inline char* getDesc(){$/;"	f	class:Sensor
getHumidity	src/DHTSensor.cpp	/^float DHTSensor::getHumidity(){$/;"	f	class:DHTSensor
getHumidity	src/WaterTempHumiditySensor.cpp	/^float WaterTempHumiditySensor::getHumidity(){$/;"	f	class:WaterTempHumiditySensor
getLastValue	src/Sensor.h	/^    float getLastValue(){ return lastVal; }$/;"	f	class:Sensor
getMedianNum	src/TDSSensor.cpp	/^int TDSSensor::getMedianNum(int bArray[], int iFilterLen) $/;"	f	class:TDSSensor
getPin	src/Sensor.h	/^    int8_t getPin() { return pin;  }$/;"	f	class:Sensor
getSampledValue	src/TDSSensor.cpp	/^float TDSSensor::getSampledValue(){$/;"	f	class:TDSSensor
getSensorType	src/Sensor.h	/^    sensor_type getSensorType() { return _sensor_type; }$/;"	f	class:Sensor
getTemperature	src/DHTSensor.cpp	/^float DHTSensor::getTemperature(){$/;"	f	class:DHTSensor
getTemperature	src/WaterTempHumiditySensor.cpp	/^float WaterTempHumiditySensor::getTemperature(){$/;"	f	class:WaterTempHumiditySensor
humidity	src/DHTSensor.h	/^      float humidity;$/;"	m	struct:DHTSensor::__anon1
humidity	src/WaterTempHumiditySensor.h	/^      float humidity;$/;"	m	struct:WaterTempHumiditySensor::__anon5
init	src/DHTSensor.cpp	/^void DHTSensor::init(const char *desc, int pin) {$/;"	f	class:DHTSensor
init	src/DisplayController.cpp	/^void DisplayController::init(int led_data_in_pin, int led_clk_pin, int led_load_cs_pin, int brightness){$/;"	f	class:DisplayController
init	src/MotorController.h	/^    inline virtual void init(char *desc, int pin) {$/;"	f	class:MotorController
init	src/Sensor.cpp	/^void Sensor::init(const char *desc, int pin){$/;"	f	class:Sensor
init	src/WaterTempHumiditySensor.cpp	/^void WaterTempHumiditySensor::init(const char *desc, int pin){$/;"	f	class:WaterTempHumiditySensor
lastVal	src/Sensor.h	/^    float lastVal= 0L;$/;"	m	class:Sensor
override	src/DHTSensor.h	/^    float readValue() override ;   \/\/defaults to Temperature$/;"	m	class:DHTSensor
override	src/DHTSensor.h	/^    void init(const char *desc, int pin) override;$/;"	m	class:DHTSensor
override	src/TDSSensor.h	/^    float readValue() override; \/\/TODO AutoCall on Timer$/;"	m	class:TDSSensor
override	src/WaterTempHumiditySensor.h	/^    float readValue() override ;   $/;"	m	class:WaterTempHumiditySensor
override	src/WaterTempHumiditySensor.h	/^    void init(const char *desc, int pin) override;$/;"	m	class:WaterTempHumiditySensor
ph	src/PHSensor.h	/^    DFRobot_PH ph;$/;"	m	class:PHSensor
phValue	src/PHSensor.h	/^    float phValue;$/;"	m	class:PHSensor
pin	src/Sensor.h	/^    int8_t pin;$/;"	m	class:Sensor
readValue	src/DHTSensor.cpp	/^float DHTSensor::readValue() {$/;"	f	class:DHTSensor
readValue	src/PHSensor.cpp	/^float PHSensor::readValue(float temperature){$/;"	f	class:PHSensor
readValue	src/Sensor.cpp	/^float Sensor::readValue(){$/;"	f	class:Sensor
readValue	src/TDSSensor.cpp	/^float TDSSensor::readValue(){$/;"	f	class:TDSSensor
readValue	src/WaterTempHumiditySensor.cpp	/^float WaterTempHumiditySensor::readValue(){$/;"	f	class:WaterTempHumiditySensor
readValueAnalog	src/Sensor.cpp	/^float Sensor::readValueAnalog(){$/;"	f	class:Sensor
readValueDigital	src/Sensor.cpp	/^float Sensor::readValueDigital(){$/;"	f	class:Sensor
relayPin	src/MotorController.h	/^    int relayPin;$/;"	m	class:MotorController
reset	src/DisplayController.h	/^    void reset(bool reset){ _reset = reset; }$/;"	f	class:DisplayController
sensor_type	src/Sensor.h	/^    typedef int8_t sensor_type;$/;"	t	class:Sensor
setDesc	src/Sensor.h	/^    inline void setDesc(const char* desc){ $/;"	f	class:Sensor
setLastValue	src/Sensor.h	/^    inline void setLastValue(float newValue){ lastVal = newValue; }$/;"	f	class:Sensor
setPin	src/Sensor.h	/^    inline void setPin(int8_t pin){ pin = pin; }$/;"	f	class:Sensor
sht20	src/WaterTempHumiditySensor.h	/^    DFRobot_SHT20    sht20;$/;"	m	class:WaterTempHumiditySensor
start	src/MotorController.cpp	/^void MotorController::start(){$/;"	f	class:MotorController
status	src/DHTSensor.cpp	/^const char* DHTSensor::status(){ $/;"	f	class:DHTSensor
stop	src/MotorController.cpp	/^void MotorController::stop(){$/;"	f	class:MotorController
tdsValue	src/TDSSensor.h	/^    float averageVoltage = 0,tdsValue = 0,temperature = 25;$/;"	m	class:TDSSensor
temperature	src/DHTSensor.h	/^      float  temperature;$/;"	m	struct:DHTSensor::__anon1
temperature	src/TDSSensor.h	/^    float averageVoltage = 0,tdsValue = 0,temperature = 25;$/;"	m	class:TDSSensor
temperature	src/WaterTempHumiditySensor.h	/^      float  temperature;$/;"	m	struct:WaterTempHumiditySensor::__anon5
update	src/DisplayController.cpp	/^static void DisplayController::update(Task* t){$/;"	f	class:DisplayController
voltage	src/PHSensor.h	/^    float voltage;$/;"	m	class:PHSensor
write	src/DisplayController.h	/^    void write(const char* msg){$/;"	f	class:DisplayController
~DisplayController	src/DisplayController.cpp	/^DisplayController::~DisplayController(){$/;"	f	class:DisplayController
~PHSensor	src/PHSensor.cpp	/^PHSensor::~PHSensor(){}$/;"	f	class:PHSensor
~Sensor	src/Sensor.cpp	/^Sensor::~Sensor(){$/;"	f	class:Sensor
